import { CSP_NONCE, Inject, Injectable, Optional } from "@angular/core";
import * as i0 from "@angular/core";
export class PrintBase {
    nonce;
    _printStyle = [];
    _styleSheetFile = '';
    constructor(nonce) {
        this.nonce = nonce;
    }
    //#region Getters and Setters
    /**
     * Sets the print styles based on the provided values.
     *
     * @param {Object} values - Key-value pairs representing print styles.
     * @protected
     */
    setPrintStyle(values) {
        this._printStyle = [];
        for (let key in values) {
            if (values.hasOwnProperty(key)) {
                this._printStyle.push((key + JSON.stringify(values[key])).replace(/['"]+/g, ''));
            }
        }
    }
    /**
     *
     *
     * @returns the string that create the stylesheet which will be injected
     * later within <style></style> tag.
     *
     * -join/replace to transform an array objects to css-styled string
     */
    returnStyleValues() {
        const styleNonce = this.nonce ? ` nonce="${this.nonce}"` : '';
        return `<style${styleNonce}> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;
    }
    /**
   * @returns string which contains the link tags containing the css which will
   * be injected later within <head></head> tag.
   *
   */
    returnStyleSheetLinkTags() {
        return this._styleSheetFile;
    }
    /**
     * Sets the style sheet file based on the provided CSS list.
     *
     * @param {string} cssList - CSS file or list of CSS files.
     * @protected
     */
    setStyleSheetFile(cssList) {
        const linkTagFn = function (cssFileName) {
            return `<link rel="stylesheet" type="text/css" href="${cssFileName}">`;
        };
        if (cssList.indexOf(',') !== -1) {
            const valueArr = cssList.split(',');
            this._styleSheetFile = valueArr.map(val => linkTagFn(val)).join('');
        }
        else {
            this._styleSheetFile = linkTagFn(cssList);
        }
    }
    //#endregion
    //#region Private methods used by PrintBase
    /**
     * Updates the default values for input elements.
     *
     * @param {HTMLCollectionOf<HTMLInputElement>} elements - Collection of input elements.
     * @private
     */
    updateInputDefaults(elements) {
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            element['defaultValue'] = element.value;
            if (element['checked'])
                element['defaultChecked'] = true;
        }
    }
    /**
     * Updates the default values for select elements.
     *
     * @param {HTMLCollectionOf<HTMLSelectElement>} elements - Collection of select elements.
     * @private
     */
    updateSelectDefaults(elements) {
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            const selectedIdx = element.selectedIndex;
            const selectedOption = element.options[selectedIdx];
            selectedOption.defaultSelected = true;
        }
    }
    /**
     * Updates the default values for textarea elements.
     *
     * @param {HTMLCollectionOf<HTMLTextAreaElement>} elements - Collection of textarea elements.
     * @private
     */
    updateTextAreaDefaults(elements) {
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            element['defaultValue'] = element.value;
        }
    }
    /**
     * Converts a canvas element to an image and returns its HTML string.
     *
     * @param {HTMLCanvasElement} element - The canvas element to convert.
     * @returns {string} - HTML string of the image.
     * @private
     */
    canvasToImageHtml(element) {
        const dataUrl = element.toDataURL();
        return `<img src="${dataUrl}" style="max-width: 100%;">`;
    }
    /**
     * Includes canvas contents in the print section via img tags.
     *
     * @param {HTMLCollectionOf<HTMLCanvasElement>} elements - Collection of canvas elements.
     * @private
     */
    updateCanvasToImage(elements) {
        for (let i = 0; i < elements.length; i++) {
            const element = this.canvasToImageHtml(elements[i]);
            elements[i].insertAdjacentHTML('afterend', element);
            elements[i].remove();
        }
    }
    /**
     * Retrieves the HTML content of a specified printing section.
     *
     * @param {string} printSectionId - Id of the printing section.
     * @returns {string | null} - HTML content of the printing section, or null if not found.
     * @private
     */
    getHtmlContents(printSectionId) {
        const printContents = document.getElementById(printSectionId);
        if (!printContents)
            return null;
        const inputEls = printContents.getElementsByTagName('input');
        const selectEls = printContents.getElementsByTagName('select');
        const textAreaEls = printContents.getElementsByTagName('textarea');
        const canvasEls = printContents.getElementsByTagName('canvas');
        this.updateInputDefaults(inputEls);
        this.updateSelectDefaults(selectEls);
        this.updateTextAreaDefaults(textAreaEls);
        this.updateCanvasToImage(canvasEls);
        return printContents.innerHTML;
    }
    /**
     * Retrieves the HTML content of elements with the specified tag.
     *
     * @param {keyof HTMLElementTagNameMap} tag - HTML tag name.
     * @returns {string} - Concatenated outerHTML of elements with the specified tag.
     * @private
     */
    getElementTag(tag) {
        const html = [];
        const elements = document.getElementsByTagName(tag);
        for (let index = 0; index < elements.length; index++) {
            html.push(elements[index].outerHTML);
        }
        return html.join('\r\n');
    }
    //#endregion
    /**
     * Prints the specified content using the provided print options.
     *
     * @param {PrintOptions} printOptions - Options for printing.
     * @public
     */
    print(printOptions) {
        let styles = '', links = '', popOut = 'top=0,left=0,height=auto,width=auto';
        const baseTag = this.getElementTag('base');
        if (printOptions.useExistingCss) {
            styles = this.getElementTag('style');
            links = this.getElementTag('link');
        }
        // If the openNewTab option is set to true, then set the popOut option to an empty string.
        // This will cause the print dialog to open in a new tab.
        if (printOptions.openNewTab) {
            popOut = '';
        }
        const printContents = this.getHtmlContents(printOptions.printSectionId);
        if (!printContents) {
            // Handle the case where the specified print section is not found.
            console.error(`Print section with id ${printOptions.printSectionId} not found.`);
            return;
        }
        const popupWin = window.open("", "_blank", popOut);
        if (!popupWin) {
            // the popup window could not be opened.
            console.error('Could not open print window.');
            return;
        }
        popupWin.document.open();
        popupWin.document.write(`
          <html>
            <head>
              <title>${printOptions.printTitle ? printOptions.printTitle : ""}</title>
              ${baseTag}
              ${this.returnStyleValues()}
              ${this.returnStyleSheetLinkTags()}
              ${styles}
              ${links}
            </head>
            <body ${printOptions.bodyClass ? `class="${printOptions.bodyClass}"` : ''}>
              ${printContents}
              <script defer>
                function triggerPrint(event) {
                  window.removeEventListener('load', triggerPrint, false);
                  ${printOptions.previewOnly ? '' : `setTimeout(function() {
                    closeWindow(window.print());
                  }, ${printOptions.printDelay});`}
                }
                function closeWindow(){
                  ${printOptions.closeWindow ? 'window.close();' : ''}
                }
                window.addEventListener('load', triggerPrint, false);
              </script>
            </body>
          </html>`);
        popupWin.document.close();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PrintBase, deps: [{ token: CSP_NONCE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PrintBase, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PrintBase, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [CSP_NONCE]
                }, {
                    type: Optional
                }] }] });
//# sourceMappingURL=data:application/json;base64,